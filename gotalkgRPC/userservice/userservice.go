// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"gotalk/gotalk"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	RequestUser           = gotalk.RequestUser
	RequestWithSessionId  = gotalk.RequestWithSessionId
	RequestWithUserName   = gotalk.RequestWithUserName
	ResponseUser          = gotalk.ResponseUser
	ResponseUsers         = gotalk.ResponseUsers
	ResponseWithSessionId = gotalk.ResponseWithSessionId
	User                  = gotalk.User

	UserService interface {
		Users(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
		StartSession(ctx context.Context, in *RequestWithUserName, opts ...grpc.CallOption) (*ResponseWithSessionId, error)
		CloseSession(ctx context.Context, in *RequestWithSessionId, opts ...grpc.CallOption) (*ResponseUser, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Users(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	client := gotalk.NewUserServiceClient(m.cli.Conn())
	return client.Users(ctx, in, opts...)
}

func (m *defaultUserService) StartSession(ctx context.Context, in *RequestWithUserName, opts ...grpc.CallOption) (*ResponseWithSessionId, error) {
	client := gotalk.NewUserServiceClient(m.cli.Conn())
	return client.StartSession(ctx, in, opts...)
}

func (m *defaultUserService) CloseSession(ctx context.Context, in *RequestWithSessionId, opts ...grpc.CallOption) (*ResponseUser, error) {
	client := gotalk.NewUserServiceClient(m.cli.Conn())
	return client.CloseSession(ctx, in, opts...)
}
