// Code generated by goctl. DO NOT EDIT.
// Source: talk.proto

package chatservice

import (
	"context"

	"gotalk/gotalk"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatMessage = gotalk.ChatMessage
	Empty       = gotalk.Empty
	SessionId   = gotalk.SessionId

	ChatService interface {
		Send(ctx context.Context, opts ...grpc.CallOption) (gotalk.ChatService_SendClient, error)
		Listener(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (gotalk.ChatService_ListenerClient, error)
	}

	defaultChatService struct {
		cli zrpc.Client
	}
)

func NewChatService(cli zrpc.Client) ChatService {
	return &defaultChatService{
		cli: cli,
	}
}

func (m *defaultChatService) Send(ctx context.Context, opts ...grpc.CallOption) (gotalk.ChatService_SendClient, error) {
	client := gotalk.NewChatServiceClient(m.cli.Conn())
	return client.Send(ctx, opts...)
}

func (m *defaultChatService) Listener(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (gotalk.ChatService_ListenerClient, error) {
	client := gotalk.NewChatServiceClient(m.cli.Conn())
	return client.Listener(ctx, in, opts...)
}
